#!/bin/dash -f
# Configure wmii
wmiiscript=wmiirc # For wmii.sh
. wmii.sh


# Configuration Variables
MODKEY=Mod4
UP=k
DOWN=j
LEFT=h
RIGHT=l

# Bars
noticetimeout=5
noticebar=/rbar/!notice

# Colors tuples: "<text> <background> <border>"
export WMII_NORMCOLORS='#000000 #808080 #C0C0C0'
export WMII_FOCUSCOLORS='#ffffff #000080 #808080'

export WMII_BACKGROUND='#008080'
export WMII_FONT='xft:Sans-8'

set -- $(echo $WMII_NORMCOLORS $WMII_FOCUSCOLORS)
export WMII_TERM="/usr/bin/konsole"

# Ask about MODKEY on first run
    if ! test -d "${WMII_CONFPATH%%:*}"; then
        mkdir "${WMII_CONFPATH%%:*}"
        res=$(wihack -type DIALOG xmessage -nearmouse -buttons Windows,Alt -print -fn $WMII_FONT \
              "Welcome to wmii,$wi_newline$wi_newline" \
              "Most of wmii's default key bindings make use of the$wi_newline" \
              "Windows key, or equivalent. For keyboards lacking such$wi_newline" \
              "a key, many users change this to the Alt key.$wi_newline$wi_newline" \
              "Which would you prefer?")
        [ "$res" = "Alt" ] && MODKEY=Mod1
        echo "MODKEY=$MODKEY" >"${WMII_CONFPATH%%:*}/wmiirc_local"
        chmod +x "${WMII_CONFPATH%%:*}/wmiirc_local"
    fi

# Menu history
hist="${WMII_CONFPATH%%:*}/history"
histnum=5000

# Column Rules
wmiir write /colrules <<!
/gimp/ -> 17+83+41
/chat/ -> 20+80 # Contacts on left
/^1$/ -> 75+25 # Chat windows to right
/.*/ -> 62+38 # Golden Ratio
!

# Tagging Rules
#wmiir write /rules <<!
#    # Apps with system tray icons like to their main windows
#    # Give them permission.
#    /^Pidgin:/ allow=+activate
#
#    # MPlayer and VLC don't float by default, but should.
#    /MPlayer|VLC/ floating=on
#
#    # ROX puts all of its windows in the same group, so they open
#    # with the same tags.  Disable grouping for ROX Filer.
#    /^ROX-Filer:/ group=0
#!
wmiir write /rules <<!
/xclock.*/ -> floating=on tags=/.*/
/florence.*/ -> tags=/.*/ floating=on
/lxpanel.*/ -> tags=/.*/+0-cinelerra
/MuseScore\:.*/ -> floating=on
/Gimp.*/ -> tags=sel+gimp+0
/Cinelerra.*/ -> tags=cinelerra
/Clementine.*/ -> tags=4+0
/Pidgin.*/ -> tags=sel+chat+0
/Skype.*/ -> tags=sel+chat+0
/Konsole.*/ -> group=0 tags=sel+0
/.*/ -> tags=sel+0
!
#wmiir write /tagrules <<!
#/xclock.*/ -> ~+/.*/
#/florence.*/ -> ~+/.*/
#/lxpanel.*/ -> +/.*/+0-cinelerra
#/MuseScore\:.*/ -> ~
#/Gimp.*/ -> sel+gimp+0
#/Cinelerra.*/ -> cinelerra
#/Clementine.*/ -> 4+0
#/Pidgin.*/ -> sel+chat+0
#/Skype.*/ -> sel+chat+0
#/.*/ -> +sel+0
#!

# Status Bar Info
status() {

    battery_status=$(acpi -b | sed 's/^.*: \(.*\)/\1/')
    master_volume=$(amixer get Master | tail -1 | head -1)
    headphone_volume=$(amixer get Headphone | tail -2 | head -1)
    speaker_volume=$(amixer get Speaker | tail -2 | head -1)
    
    # Get mute status
    echo "$master_volume" | grep off >/dev/null 2>/dev/null; master_mute=$?
    echo "$headphone_volume" | grep off >/dev/null 2>/dev/null; headphone_mute=$?
    echo "$speaker_volume" | grep off >/dev/null 2>/dev/null; speaker_mute=$?

    # Extract volume percentages
    master_volume=$(echo "$master_volume" | awk '{print $4}' | sed 's/\[\|\]//g')
    headphone_volume=$(echo "$headphone_volume" | awk '{print $5}' | sed 's/\[\|\]//g')
    speaker_volume=$(echo "$speaker_volume" | awk '{print $5}' | sed 's/\[\|\]//g')

    # If muted, put percentage in parentheses
    [ $master_mute -eq 0 ] && master_volume="($master_volume)"
    [ $headphone_mute -eq 0 ] && headphone_volume="($headphone_volume)"
    [ $speaker_mute -eq 0 ] && speaker_volume="($speaker_volume)"

    screen_brightness=$(awk 'BEGIN { rounded = sprintf("%.0f", '"$(xbacklight -get)"'); print rounded }')
    color_temperature=$(redshift-adjust -p)

    #echo -n label "Dropbox: $(dropbox.py status &) | Battery: $(acpi -b | sed 's/^.*: \(.*\)/\1/') | Volume: $(volwheel -s|sed -r 's/.* ([-0-9]+%)$/\1/') | $(date)"
    #echo -n label "Battery: $(acpi -b | sed 's/^.*: \(.*\)/\1/') | Volume: $(amixer get Headphone | tail -2 | head -1 | awk '{print $5}' | sed 's/\[\|\]//g')/$(volwheel -s|sed -r 's/.* ([-0-9]+%)$/\1/') | $(date)"
    echo -n "label Bat: $battery_status | Scr: ${color_temperature}K:$screen_brightness% | Vol: M:$master_volume H:$headphone_volume S:$speaker_volume | $(date)"
}
dbstatus() {
    echo -n "label Dropbox: "
    dropbox.py status
    #echo -n "label "Dropbox: $(dropbox.py status | head -c -1 | sed ':a;N;$!ba;s/\n/, /g')"
    #exit 0
}

# Generic overridable startup details
startup() {
#witray &
${WMII_CONFPATH%%:*}/autostart
}

wi_runconf -s wmiirc_local
startup

echo colors $WMII_NORMCOLORS | wmiir create $noticebar

# Event processing
wi_events <<'!'
# Events
Event CreateTag
	echo colors "$WMII_NORMCOLORS$wi_newline" label "$@" | wmiir create "/lbar/$@"
Event DestroyTag
	wmiir remove "/lbar/$@"
Event FocusTag
	wmiir xwrite "/lbar/$@" colors "$WMII_FOCUSCOLORS"
Event UnfocusTag
	wmiir xwrite "/lbar/$@" colors "$WMII_NORMCOLORS"
Event UrgentTag
	shift
	wmiir xwrite "/lbar/$@" label "*$@"
Event NotUrgentTag
	shift
	wmiir xwrite "/lbar/$@" label "$@"
Event LeftBarClick LeftBarDND
	shift
	wmiir xwrite /ctl view "$@"
Event Unresponsive
	{
		client=$1; shift
		msg="The following client is not responding. What would you like to do?$wi_newline"
		resp=$(wihack -transient $client \
			      xmessage -nearmouse -buttons Kill,Wait -print \
			      -fn "${WMII_FONT%%,*}" "$msg $(wmiir read /client/sel/label)")
		if [ "$resp" = Kill ]; then
			wmiir xwrite /client/$client/ctl slay &
		fi
	}&
Event Notice
	wmiir xwrite $noticebar label $wi_arg

	kill $xpid 2>/dev/null # Let's hope this isn't reused...
	{ sleep $noticetimeout; wmiir xwrite $noticebar label; }&
	xpid = $!

# Menus
#Menu Client-3-Delete
Menu Client-3-Close
	wmiir xwrite /client/$1/ctl kill
Menu Client-3-Stop
	kill -STOP $(wmiir cat /client/$1/ctl | grep pid | awk '{print $2}')
Menu Client-3-Cont
	kill -CONT $(wmiir cat /client/$1/ctl | grep pid | awk '{print $2}')
Menu Client-3-Kill
	wmiir xwrite /client/$1/ctl slay
Menu Client-3-Fullscreen
	wmiir xwrite /client/$1/ctl Fullscreen on
Event ClientMouseDown
	wi_fnmenu Client $2 $1 &

Menu LBar-3-Delete
	tag=$1; clients=$(wmiir read "/tag/$tag/index" | awk '/[^#]/{print $2}')
	for c in $clients; do
		if [ "$tag" = "$(wmiir read /client/$c/tags)" ]
		then wmiir xwrite /client/$c/ctl kill
		else wmiir xwrite /client/$c/ctl tags -$tag
		fi
		[ "$tag" = "$(wi_seltag)" ] &&
			wmiir xwrite /ctl view $(wi_tags | wi_nexttag)
	done
Event LeftBarMouseDown
	wi_fnmenu LBar "$@" &

# Actions
Action showkeys
	echo "$KeysHelp" | xmessage -file - -fn ${WMII_FONT%%,*}
Action quit
	wmiir xwrite /ctl quit
Action exec
	wmiir xwrite /ctl exec "$@"
Action rehash
	wi_proglist $PATH >$progsfile
Action status
	set +xv
	if wmiir remove /rbar/status 2>/dev/null; then
		sleep 2
	fi
	echo colors "$WMII_NORMCOLORS" | wmiir create /rbar/status
	while status | wmiir write /rbar/status; do
		sleep 1
	done
Action dbstatus
	set +xv
	if wmiir remove /rbar/dbstatus 2>/dev/null; then
		sleep 2
	fi
	echo colors "$WMII_NORMCOLORS" | wmiir create /rbar/dbstatus

	# while wmii is running
	while pidof wmii >/dev/null; do
		dropbox_text=$(dbstatus)
                wmiir xwrite /rbar/dbstatus "$dropbox_text"
		sleep 2
	done

# Key Bindings
KeyGroup Moving around
Key $MODKEY-$LEFT   # Select the client to the left
	wmiir xwrite /tag/sel/ctl select left
Key $MODKEY-$RIGHT  # Select the client to the right
	wmiir xwrite /tag/sel/ctl select right
Key $MODKEY-$UP     # Select the client above
	wmiir xwrite /tag/sel/ctl select up
Key $MODKEY-$DOWN   # Select the client below
	wmiir xwrite /tag/sel/ctl select down

Key $MODKEY-space   # Toggle between floating and managed layers
	wmiir xwrite /tag/sel/ctl select toggle

KeyGroup Moving through stacks
Key $MODKEY-Control-$UP    # Select the stack above
	wmiir xwrite /tag/sel/ctl select up stack
Key $MODKEY-Control-$DOWN  # Select the stack below
	wmiir xwrite /tag/sel/ctl select down stack

KeyGroup Moving clients around
Key $MODKEY-Shift-$LEFT   # Move selected client to the left
	wmiir xwrite /tag/sel/ctl send sel left
Key $MODKEY-Shift-$RIGHT  # Move selected client to the right
	wmiir xwrite /tag/sel/ctl send sel right
Key $MODKEY-Shift-$UP     # Move selected client up
	wmiir xwrite /tag/sel/ctl send sel up
Key $MODKEY-Shift-$DOWN   # Move selected client down
	wmiir xwrite /tag/sel/ctl send sel down

Key $MODKEY-Shift-space   # Toggle selected client between floating and managed layers
	wmiir xwrite /tag/sel/ctl send sel toggle

KeyGroup Client actions
Key $MODKEY-f # Toggle selected client's fullsceen state
	wmiir xwrite /client/sel/ctl Fullscreen toggle
Key $MODKEY-Shift-c # Close client
	wmiir xwrite /client/sel/ctl kill

KeyGroup Changing column modes
Key $MODKEY-d # Set column to default mode
	wmiir xwrite /tag/sel/ctl colmode sel default-max
Key $MODKEY-Shift-d # Set column to default+max mode
	wmiir xwrite /tag/sel/ctl colmode sel default+max
Key $MODKEY-s # Set column to stack mode
	wmiir xwrite /tag/sel/ctl colmode sel stack-max
Key $MODKEY-m # Set column to max mode
	wmiir xwrite /tag/sel/ctl colmode sel stack+max

KeyGroup Running programs
Key $MODKEY-a      # Open wmii actions menu
	action $(wi_actions | wimenu -h "${hist}.actions" -n $histnum) &
Key $MODKEY-p      # Open program menu
	eval wmiir setsid "$(wimenu -h "${hist}.progs" -n $histnum <$progsfile)" &

Key $MODKEY-Return # Launch a terminal
	eval wmiir setsid $WMII_TERM &

KeyGroup Other
Key $MODKEY-Control-t # Toggle all other key bindings
	case $(wmiir read /keys | wc -l | tr -d ' \t\n') in
	0|1)
		echo -n "$Keys" | wmiir write /keys
		wmiir xwrite /ctl grabmod $MODKEY;;
	*)
		wmiir xwrite /keys $MODKEY-Control-t
		wmiir xwrite /ctl grabmod Mod3;;
	esac

KeyGroup Tag actions
Key $MODKEY-t       # Change to another tag
	wmiir xwrite /ctl view $(wi_tags | wimenu -h "${hist}.tags" -n 50) &
Key $MODKEY-Shift-t # Retag the selected client
	# Assumes left-to-right order of evaluation
	wmiir xwrite /client/$(wi_selclient)/ctl tags $(wi_tags | wimenu -h "${hist}.tags" -n 50) &
Key $MODKEY-Shift-grave     # Retag selected client for all tags
	wmiir xwrite /client/sel/ctl tags "/.*/"
Key $MODKEY-Shift-minus     # Remove the selected client from the current workspace
	wmiir xwrite /client/sel/ctl tags "-sel"
Key $MODKEY-n	    # Move to the next tag
	wmiir xwrite /ctl view $(wi_tags | wi_nexttag)
Key $MODKEY-b	    # Move to the previous tag
	wmiir xwrite /ctl view $(wi_tags | sort -r | wi_nexttag)
!
	for i in 0 1 2 3 4 5 6 7 8 9; do
		wi_events <<!
Key $MODKEY-$i		 # Move to the numbered view
	wmiir xwrite /ctl view "$i"
Key $MODKEY-Shift-$i     # Retag selected client with the numbered tag
	wmiir xwrite /client/sel/ctl tags "0+$i"
!
	done

	wi_events <<'!'
KeyGroup User Defined
Key $MODKEY-e       # Launch dolphin
	dolphin &
Key Control-Escape # LXPanel Applications menu
	lxpanelctl menu
Key Mod1-F2 # LXPanel Run dialog
	lxpanelctl run
Key $MODKEY-r       # LXPanel Run dialog
	lxpanelctl run
Key Mod4-Control-l  # Lock screen
	/usr/bin/xscreensaver-command -lock	
Key $MODKEY-Left   # Select the client to the left
	wmiir xwrite /tag/sel/ctl select left
Key $MODKEY-Right  # Select the client to the right
	wmiir xwrite /tag/sel/ctl select right
Key $MODKEY-Up     # Select the client above
	wmiir xwrite /tag/sel/ctl select up
Key $MODKEY-Down   # Select the client below
	wmiir xwrite /tag/sel/ctl select down
Key $MODKEY-Shift-Left # Decrease width of column from right
	wmiir xwrite /tag/sel/ctl grow sel sel right -1
Key $MODKEY-Shift-Right # Increase width of column from right
	wmiir xwrite /tag/sel/ctl grow sel sel right 1
Key $MODKEY-Shift-Down # Increase height of window from bottom
	wmiir xwrite /tag/sel/ctl grow sel sel down 1
Key $MODKEY-Shift-Up       # Decrease height of window from bottom
	wmiir xwrite /tag/sel/ctl grow sel sel down -1
Key $MODKEY-Control-Left # Increase width of column from left
	wmiir xwrite /tag/sel/ctl grow sel sel left 1
Key $MODKEY-Control-Right # Decrease width of column from left
	wmiir xwrite /tag/sel/ctl grow sel sel left -1
Key $MODKEY-Control-Up # Increase height of window from top
	wmiir xwrite /tag/sel/ctl grow sel sel up 1
Key $MODKEY-Control-Down       # Decrease height of window from top
	wmiir xwrite /tag/sel/ctl grow sel sel up -1
Key $MODKEY-equal # Equalize column widths
	wmequalize.py
Key $MODKEY-F1 # Open wmii manual
	xdg-open /usr/share/doc/wmii/wmii.pdf &
Key $MODKEY-Shift-Delete # Kill current window
	wmiir xwrite /client/sel/ctl slay
#Key Control-Shift-Escape
#	lxtask &
Key Control-Shift-Escape # Open system monitor
	ksysguard &
Key Control-Mod1-Delete # Ctrl+Alt+Del, Classic Mac style
	xmessage -nearmouse "This is not DOS!" &
!

wi_events -e

# WM Configuration
wmiir write /ctl <<!
	font $WMII_FONT
	focuscolors $WMII_FOCUSCOLORS
	normcolors $WMII_NORMCOLORS
	grabmod $MODKEY
	border 1
!
xsetroot -solid "$WMII_BACKGROUND" &

# Misc
progsfile="$(wmiir namespace)/.proglist"
action status &
action dbstatus &
wi_proglist $PATH >$progsfile &

# Setup Tag Bar
IFS="$wi_newline"
wmiir rm $(wmiir ls -p /lbar) >/dev/null
seltag=$(wmiir read /tag/sel/ctl | sed 1q)
unset IFS
wi_tags | while read tag
do
	if [ "$tag" = "$seltag" ]; then
		echo colors "$WMII_FOCUSCOLORS"
		echo label $tag
	else
		echo colors "$WMII_NORMCOLORS"
		echo label $tag
	fi | wmiir create "/lbar/$tag"
done

wi_eventloop

